@incollection{intro_microservices,
  author = {Nicola Dragoni and Saverio Giallorenzo and Alberto Lluch{-}Lafuente
            and Manuel Mazzara and Fabrizio Montesi and Ruslan Mustafin and
            Larisa Safina},
  title = {Microservices: Yesterday, Today, and Tomorrow},
  booktitle = {Present and Ulterior Software Engineering},
  pages = {195--216},
  year = {2017},
  doi = {10.1007/978-3-319-67425-4\_12},
  publisher = {Springer},
}

@incollection{intro_serverless,
  author = {Nicola Dragoni and Saverio Giallorenzo and Alberto Lluch{-}Lafuente
            and Manuel Mazzara and Fabrizio Montesi and Ruslan Mustafin and
            Larisa Safina},
  title = {Microservices: Yesterday, Today, and Tomorrow},
  booktitle = {Present and Ulterior Software Engineering},
  pages = {195--216},
  year = {2017},
  doi = {10.1007/978-3-319-67425-4\_12},
  publisher = {Springer},
}

@article{jolie,
  title = {JOLIE: a Java Orchestration Language Interpreter Engine},
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {181},
  pages = {19-33},
  year = {2007},
  note = {Combined Proceedings of the Second International Workshop on
          Coordination and Organization (CoOrg 2006) and the Second International
          Workshop on Methods and Tools for Coordinating Concurrent, Distributed
          and Mobile Systems (MTCoord 2006)},
  issn = {1571-0661},
  doi = {https://doi.org/10.1016/j.entcs.2007.01.051},
  url = {https://www.sciencedirect.com/science/article/pii/S1571066107003660},
  author = {Fabrizio Montesi and Claudio Guidi and Roberto Lucchi and Gianluigi
            Zavattaro},
  keywords = {SOA, coordination, orchestration, Java, service, engine},
  abstract = {Service oriented computing is an emerging paradigm for programming
              distributed applications based on services. Services are simple
              software elements that supply their functionalities by exhibiting
              their interfaces and that can be invoked by exploiting simple
              communication primitives. The emerging mechanism exploited in
              service oriented computing for composing services –in order to
              provide more complex functionalities– is by means of orchestrators.
              An orchestrator is able to invoke and coordinate other services by
              exploiting typical workflow patterns such as parallel composition,
              sequencing and choices. Examples of orchestration languages are
              XLANG [IBM, “XLANG: Web Services for Business Process Design,”
              http://www.gotdotnet.com/team/xml_wsspecs/xlang-c/default.htm] and
              WS-BPEL [OASIS, “Web Services Business Process Execution Language
              Version 2.0, Working Draft,”
              http://www.oasis-open.org/committees/download.php/10347/wsbpel-specification-draft-120204.htm].
              In this paper we present JOLIE, an interpreter and engine for
              orchestration programs. The main novelties of JOLIE are that it
              provides an easy to use development environment (because it
              supports a more programmer friendly C/Java-like syntax instead of
              an XML-based syntax) and it is based on a solid mathematical
              underlying model (developed in previous works of the authors [N.
              Busi, R. Gorrieri, C. Guidi, R. Lucchi and G. Zavattaro, Towards a
              formal framework for Choreography, in: Proc. of 3rd International
              Workshop on Distributed and Mobile Collaboration (DMC 2005) (2005),
              N. Busi, R. Gorrieri, C. Guidi, R. Lucchi and G. Zavattaro,
              Choreography and orchestration conformance for system design, in:
              Proc. of 8th International Conference on Coordination Models and
              Languages (COORDINATION'06), LNCS to appear, 2006, C. Guidi and R.
              Lucchi, Mobility mechanisms in service oriented computing, in:
              Proc. of 8th International Conference on on Formal Methods for Open
              Object-Based Distributed Systems (FMOODS'06), LNCS to appear,
              2006]).},
}

@online{ts,
  author = {{TypeScript}},
  title = {{TypeScript: JavaScript that scales}},
  year = 2023,
  url = {https://www.typescriptlang.org/},
  urldate = {2023-07-20},
}

@online{sls,
  author = {{Serverless Framework}},
  title = {{Serverless Framework: Build applications on AWS Lambda, Azure
           Functions, Google Cloud Functions, and more}},
  year = 2023,
  url = {https://www.serverless.com/},
  urldate = {2023-07-20},
}

@inproceedings{docker_swarm,
  author = {Marathe, Nikhil and Gandhi, Ankita and Shah, Jaimeel M},
  booktitle = {2019 3rd International Conference on Trends in Electronics and
               Informatics (ICOEI)},
  title = {Docker Swarm and Kubernetes in Cloud Computing Environment},
  year = {2019},
  volume = {},
  number = {},
  pages = {179-184},
  abstract = {Distributed computing is a technology which contributes new stack
              of computing placed on virtualization of assets. With the most
              recent pattern of building up the applications on cloud, which
              empower the customer to get to it in an expanding way, by this the
              heap climbing quickly on the servers. Due to this sense of growing
              the stack on the servers, the resources are not efficiently
              exploited. So this is the logic why it has been brought in this
              era. The main ambition of us is to balance the work on each & every
              nodes. This will help to distribute the work on different nodes by
              remembering that no hubs ought to be overloaded. Thus this paper
              include what is docker and container by this clear cut ideas will
              helps us out to understand the docker swarm and kubernetes
              technology. Finally the paper shows how the services is been access
              by the node in a cluster with the help out docker swarm and
              kubernetes and also it provide the difference between them.},
  keywords = {},
  doi = {10.1109/ICOEI.2019.8862654},
  ISSN = {},
  month = {April},
}

@online{rr,
  author = "{Wikipedia contributors}",
  title = "Round-robin scheduling --- {W}ikipedia{,} The Free Encyclopedia",
  year = "2023",
  url = "
         https://en.wikipedia.org/w/index.php?title=Round-robin_scheduling&oldid=1120625095
         ",
  urldate = {21-04-2023},
}

@inproceedings{tapp,
  author = {De Palma, Giuseppe and Giallorenzo, Saverio and Mauro, Jacopo and
            Trentin, Matteo and Zavattaro, Gianluigi},
  booktitle = {2022 IEEE International Conference on Web Services (ICWS)},
  title = {A Declarative Approach to Topology-Aware Serverless
           Function-Execution Scheduling},
  year = {2022},
  volume = {},
  number = {},
  pages = {337-342},
  abstract = {State-of-the-art serverless platforms use hard-coded scheduling
              policies that are unaware of the possible topological constraints
              of functions. Considering these constraints when scheduling
              functions leads to sensible performance improvements, e.g.,
              minimising loading times or data-access latencies. This issue
              becomes more pressing when considered in the emerging multi-cloud
              and edge-cloud-continuum systems, where only specific nodes can
              access specialised, local resources. To address this problem, we
              present a declarative language for defining serverless scheduling
              policies to express constraints on topologies of schedulers and
              execution nodes. We implement our approach as an extension of the
              OpenWhisk platform.},
  keywords = {},
  doi = {10.1109/ICWS55610.2022.00056},
  ISSN = {},
  month = {July},
}

@inproceedings{app,
  author = "De Palma, Giuseppe and Giallorenzo, Saverio and Mauro, Jacopo and
            Zavattaro, Gianluigi",
  editor = "Kafeza, Eleanna and Benatallah, Boualem and Martinelli, Fabio and
            Hacid, Hakim and Bouguettaya, Athman and Motahari, Hamid",
  title = "Allocation Priority Policies for Serverless Function-Execution
           Scheduling Optimisation",
  booktitle = "Service-Oriented Computing",
  year = "2020",
  publisher = "Springer International Publishing",
  address = "Cham",
  pages = "416--430",
  abstract = "Serverless computing is a Cloud development paradigm where
              developers write and compose stateless functions, abstracting from
              their deployment and scaling. In this paper, we address the problem
              of function-execution scheduling, i.e., how to schedule the
              execution of Serverless functions to optimise their performance
              against some user-defined goals. We introduce a declarative
              language of Allocation Priority Policies (APP) to specify policies
              that inform the scheduling of function execution. We present a
              prototypical implementation of APP as an extension of Apache
              OpenWhisk and we validate it by i) implementing a use case
              combining IoT, Edge, and Cloud Computing and ii) by comparing its
              performance to an alternative implementation that uses vanilla
              OpenWhisk.",
  isbn = "978-3-030-65310-1",
}

@online{grpc,
  author = {{Grpc Authors}},
  title = {{The gRPC Website} Homepage},
  year = 2023,
  url = {https://web.archive.org/web/20230518023109/https://grpc.io/},
  urldate = {2023-05-21},
}

@techreport{soap,
  number = {draft-box-http-soap-01},
  type = {Internet-Draft},
  institution = {Internet Engineering Task Force},
  publisher = {Internet Engineering Task Force},
  note = {Work in Progress},
  url = {https://datatracker.ietf.org/doc/draft-box-http-soap/01/},
  author = {Dov Winer and Satish Thatte and Don Box and Gopal Kakivaya and
            Andrew Layman},
  title = {{SOAP: Simple Object Access Protocol}},
  pagetotal = 27,
  year = 1999,
  month = dec,
  day = 2,
  abstract = {SOAP defines an RPC mechanism using XML for client-server
              interaction across a network by using the following mechanisms: *
              HTTP as the base transport * XML documents for encoding of
              invocation requests and responses},
}

@online{uri,
  author = "{Wikipedia contributors}",
  title = "Uniform Resource Identifier --- {W}ikipedia{,} The Free Encyclopedia",
  year = "2023",
  url = "
         https://en.wikipedia.org/w/index.php?title=Uniform_Resource_Identifier&oldid=1154935386
         ",
  urldate = {31-05-2023},
}

@online{sodep,
  author = "{Jolie contributors}",
  title = "SODEP --- {J}olie documentation",
  year = "2023",
  url = "
         https://web.archive.org/web/20230627101022/https://docs.jolie-lang.org/v1.11.x/language-tools-and-standard-library/protocols/sodep/index.html
         ",
  urldate = {31-05-2023},
}

@online{jocker,
  author = "{Jolie contributors}",
  title = "Jocker --- {G}itHub",
  year = "2023",
  url = "
         https://web.archive.org/web/20210625145025/https://github.com/jolie/jocker
         ",
  urldate = {25-06-2023},
}

@inproceedings{similar,
  title = {Amoeba: Qos-awareness and reduced resource usage of microservices
           with serverless computing},
  author = {Li, Zijun and Chen, Quan and Xue, Shuai and Ma, Tao and Yang, Yong
            and Song, Zhuo and Guo, Minyi},
  booktitle = {2020 IEEE International Parallel and Distributed Processing
               Symposium (IPDPS)},
  pages = {399--408},
  year = {2020},
  organization = {IEEE},
}

@online{docker,
  author = "{Docker team}",
  title = "{Docker: Accelerated, Containerized Application Development}",
  year = "2023",
  url = "https://web.archive.org/web/20230627050857/https://www.docker.com/",
  urldate = {2023-06-27},
}

@online{kubernetes,
  author = "{Kubernetes team}",
  title = "{Kubernetes}",
  year = "2023",
  url = "https://web.archive.org/web/20230627031921/https://kubernetes.io/",
  urldate = {2023-06-27},
}
